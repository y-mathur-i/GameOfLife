[{"C:\\Users\\M_L_Acc\\Desktop\\projs\\GameofLife\\game\\src\\index.js":"1","C:\\Users\\M_L_Acc\\Desktop\\projs\\GameofLife\\game\\src\\App.js":"2"},{"size":220,"mtime":1611078735487,"results":"3","hashOfConfig":"4"},{"size":2593,"mtime":1611093901636,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1wlzto0",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\M_L_Acc\\Desktop\\projs\\GameofLife\\game\\src\\index.js",[],["12","13"],"C:\\Users\\M_L_Acc\\Desktop\\projs\\GameofLife\\game\\src\\App.js",["14","15","16"],"import \"./App.css\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport produce from \"immer\";\n\nconst dir = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\nlet numCols = 100;\nlet numRows = 40;\nfunction App() {\n  const createArr = () => {\n    let arr = new Array(40).fill().map(() => Array(100));\n    for (let i = 0; i < 40; i++) {\n      for (let j = 0; j < 100; j++) {\n        arr[i][j] = 0;\n      }\n    }\n    return arr;\n  };\n  const [working, setWorking] = useState(false);\n  const [grid, setGrid] = useState(createArr());\n  const activate = (x, y) => {\n    let newGrid = produce(grid, (gridCopy) => {\n      gridCopy[x][y] = grid[x][y] === 1 ? 0 : 1;\n    });\n    setGrid(newGrid);\n  };\n\n  const workingRef = useRef();\n  workingRef.current = working;\n  const transformGrid = useCallback(() => {\n    // console.log(\"ab\");\n    if (!workingRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < 40; i++) {\n          for (let j = 0; j < 100; j++) {\n            let count = 0;\n            dir.forEach(([x, y]) => {\n              const dx = i + x;\n              const dy = j + y;\n              if (0 <= dx && dx < 40 && 0 <= dy && dy < 100) {\n                count += g[dx][dy];\n              }\n            });\n            if (count > 3 || count < 2) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && count === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(transformGrid, 100);\n  }, []);\n\n  return (\n    <>\n      <div className=\"main\">\n        <div className=\"heading\">\n          <h1> Conway's game of life</h1>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, r) =>\n            row.map((col, c) => {\n              return (\n                <div\n                  className=\"cell\"\n                  key={`${r}-${c}`}\n                  style={{\n                    backgroundColor: grid[r][c] === 1 ? \"#20be7c\" : undefined,\n                  }}\n                  onClick={() => activate(r, c)}\n                ></div>\n              );\n            })\n          )}\n        </div>\n        <button\n          className=\"btn\"\n          onClick={() => {\n            setWorking(!working);\n            if (!working) {\n              workingRef.current = true;\n            }\n            transformGrid();\n          }}\n        >\n          {working ? \"stop\" : \"Transform\"}\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":2,"column":30,"nodeType":"23","messageId":"24","endLine":2,"endColumn":39},{"ruleId":"21","severity":1,"message":"25","line":16,"column":5,"nodeType":"23","messageId":"24","endLine":16,"endColumn":12},{"ruleId":"21","severity":1,"message":"26","line":17,"column":5,"nodeType":"23","messageId":"24","endLine":17,"endColumn":12},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'numCols' is assigned a value but never used.","'numRows' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]